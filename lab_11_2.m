% Задание значений для x1 и x2
x1_values = [-2 -2 -2 -2 -2 -1 -1 -1 -1 -1 0 0 0 0 0 1 1 1 1 1 2 2 2 2];
x2_values = [-2 -1 0 1 2 -2 -1 0 1 2 -2 -1 0 1 2 -2 -1 0 1 2 -2 -1 0 1];

% Формирование входных значений
Input = [x1_values; x2_values]; % Входные данные в формате 2 строки

% Расчет целевых значений
Target = [28 15 4 -5 -12 15 7 1 -3 -5 4 1 0 1 4 -5 -3 1 7 15  -12 -5 4 15] % x1_values.^2 + x2_values.^2 + 5 .* x1_values .* x2_values; % y = x1^2 + x2^2 + 5*x1*x2

% Создание нейронной сети
net = feedforwardnet(5);  % ФА - гиперболический тангенс, ФА для вых слоя - линейная

% Обучение нейронной сети
net = train(net, Input, Target); % Обучение по алгоритму обратного распространения ошибки

% Проверка сети на тех же входных значениях
y_pred = net(Input); % Получение предсказанных значений

% Визуализация результатов
figure;
scatter(1:length(Target), Target, 'b', 'filled'); % Исходные значения
hold on;
scatter(1:length(y_pred), y_pred, 'r'); % Предсказанные значения
legend('Целевые значения', 'Предсказанные значения');
title('Сравнение целевых и предсказанных значений');
xlabel('Индекс');
ylabel('Значение');
grid on;
hold off;


% Вычисление погрешности аппроксимации
s1 = 0;
s2 = 0;
for (i = 1 : length(Target))
   s1 = s1 + ((Target(i) - y_pred(i))^2);
   s2 = s2 + (Target(i)^2);
end
s1 = sqrt(s1);
d = s1 / sqrt(s2);
disp(['Относительная погрешность: ', num2str(d)]);